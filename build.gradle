import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

if (!hasProperty('odeUsername')) {
    ext.odeUsername = ''
}
if (!hasProperty('odePassword')) {
    ext.odePassword = ''
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jacoco'

    repositories {
        mavenLocal()
        maven {
            url "https://maven.opendigitaleducation.com/nexus/content/groups/public"
        }
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/iovertx-3720/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    configurations {
        provided
//        runtime.exclude module: 'vertx-core'
    }

    sourceSets {
        main { compileClasspath += configurations.provided }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }

    compileTestJava {
        sourceCompatibility = project.sourceCompatibility
        targetCompatibility = project.targetCompatibility
    }
    dependencies {
        compileOnly "io.vertx:vertx-core:$vertxVersion"
        testCompile "io.vertx:vertx-unit:$vertxVersion"
        testCompile "io.vertx:vertx-core:$vertxVersion"
        testCompile "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.powermock:powermock-core:$powerMockVersion"
        compile "fr.wseduc:vertx-cron-timer:$vertxCronTimer"
        testCompile "io.vertx:testtools:$toolsVersion"
    }

    jar {
        sourceSets.main.resources.srcDirs += [ "deployment" ]
        manifest {
            attributes(
                    "Main-Verticle": "service:mod"
            )
        }
    }

    task testJar(type: Jar) {
        classifier = 'tests'
        baseName = "${modname}"
        from sourceSets.test.output
    }

    task deploymentJar(type: Jar) {
        classifier = 'deployment'
        baseName = "${modname}"
        from 'deployment'
    }

    artifacts {
        archives testJar
        archives deploymentJar
    }

    jacoco {
        toolVersion = "0.8.3"
        reportsDir = file("$buildDir/reports")
    }

    shadowJar {
        classifier = 'fat'
        archiveName = "${modowner}~${modname}~$version-$classifier.$extension"
        mergeServiceFiles {
            include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        }
    }

    install {
        repositories.mavenInstaller {
            pom.version = "$version"
            pom.artifactId = "${project.name}"
            pom.groupId = "${modowner}"
        }
    }

    publishing {
        repositories {
            if (version.endsWith("SNAPSHOT")) {
                maven {
                    name 'Snapshots'
                    url 'https://maven.opendigitaleducation.com/nexus/content/repositories/snapshots/'
                    credentials {
                        username "${odeUsername}"
                        password "${odePassword}"
                    }
                }
            } else {
                maven {
                    name 'Releases'
                    url 'https://maven.opendigitaleducation.com/nexus/content/repositories/releases/'
                    credentials {
                        username "${odeUsername}"
                        password "${odePassword}"
                    }
                }
            }
        }
        publications {
            maven(MavenPublication) {
                groupId "$modowner"
                artifactId "$modname"
                artifact("build/libs/$modowner~$modname~$version-fat.jar") { classifier "fat" }
            }
            maven(MavenPublication) {
                groupId "$modowner"
                artifactId "$modname"
                artifact("build/libs/$modname-$version-deployment.jar") { classifier "deployment" }
            }
            maven(MavenPublication) {
                groupId "$modowner"
                artifactId "$modname"
                artifact("build/libs/$modname-$version-tests.jar") { classifier "tests" }
            }
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        classpath = configurations.provided
        classpath += configurations.compile
    }


    test {
//        println('laucnhing ')
        jvmArgs '-XX:+StartAttachListener'
        classpath += configurations.compileOnly
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR,
                        TestLogEvent.STANDARD_OUT
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            xml.destination file("$buildDir/../../coverage/server/${project.name}.xml")
        }
    }

    afterEvaluate { project ->
        project.tasks['publishToMavenLocal'].doLast {
            rootProject.delete "build"
        }
    }
}

project(":common") {
    dependencies {
        compile "io.vertx:vertx-core:$vertxVersion"
        compile "org.entcore:common:$entCoreVersion"
        compile "org.apache.commons:commons-lang3:3.6"
        testCompile "io.vertx:vertx-core:$vertxVersion"
        testCompile "org.entcore:common:$entCoreVersion"
        testCompile "org.entcore:tests:$entCoreVersion"
        testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    }
}

project(":presences") {
    dependencies {
        compile project(':common')
        compileOnly "io.vertx:vertx-core:$vertxVersion"
        compile "org.entcore:common:$entCoreVersion"
        testCompile "org.entcore:tests:$entCoreVersion"
        testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    }
}

project(":incidents") {
    dependencies {
        compile project(':common')
        compileOnly "io.vertx:vertx-core:$vertxVersion"
        compile "org.entcore:common:$entCoreVersion"
        testCompile "org.entcore:tests:$entCoreVersion"
        testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    }
}

project(":massmailing") {
    dependencies {
        compile project(':common')
        compileOnly "io.vertx:vertx-core:$vertxVersion"
        compile "org.entcore:common:$entCoreVersion"
        testCompile "org.entcore:tests:$entCoreVersion"
        testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    }
}

project(":statistics-presences") {
    dependencies {
        compile project(':common')
        compileOnly "io.vertx:vertx-core:$vertxVersion"
        compile "org.entcore:common:$entCoreVersion"
        testCompile "org.entcore:tests:$entCoreVersion"
        testCompile 'io.gatling.highcharts:gatling-charts-highcharts:2.2.2'
    }
}